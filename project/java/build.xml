<?xml version="1.0" encoding="utf-8"?>

<project name="StringTest" default="debug" basedir=".">

    <!--加载工程自定义属性-->
    <property file="build.properties"/>
    <property name="def-main-class" value="${ant.project.name}"/>

    <!-- 配置基本属性:定义变量 -->
    <property name="src.dir" value="src"/>
    <property name="bin.dir" value="bin"/>
    <property name="lib.dir" value="lib"/>
    <property name="jar.dir" value="${bin.dir}/jar"/>
    <property name="junit.dir" value="${bin.dir}/junit"/>
    <property name="classes.dir" location="${bin.dir}/classes"/>  <!-- 内部转换为绝对路径 -->

    <!-- <echo level="info">relative path:${bin.dir} absolute path:${classes.dir}</echo> -->

    <!-- 配置运行时classhpath -->
    <path id="classpath.run">
        <pathelement path="${classes.dir}"/>  <!-- 一定是可知性的变量 -->
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
    </path>

    <!-- 配置单元测试时的classpath -->
    <path id="classpath.test">
        <path refid="classpath.run"/>
        <path location="${jar.dir}/${ant.project.name}-${DSTAMP}${TSTAMP}.jar"/>
    </path>

    <!-- 清除任务 -->
    <target name="clean">
        <delete dir="${bin.dir}"/>
    </target>

    <!-- 初始化任务-->
    <target name="init">
        <tstamp/>  <!-- 生成时间戳 -->
        <mkdir dir="${lib.dir}"/>
        <!-- 查找Main-Class 包名类 -->
        <exec dir="${src.dir}" executable="grep">
            <arg value="-r" />
            <arg value="public static void main" />
            <redirector outputproperty="grep.main.class" 
                    errorproperty="grep.error">
                <outputfilterchain>
                    <tokenfilter>
                        <replaceregex 
                                pattern=".java:\s+(.*)" 
                                flags="g"
                                replace=""
                                byline="true" />
                        <replacestring from="/" to="." />
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
        <echo level="info">grep main-class: ${grep.main.class} </echo>
        <!-- 如果没有查找到Main-Class, 使用默认的类, 工程名 -->
        <condition property="main-class" value="${def-main-class}" else="${grep.main.class}">
            <equals arg1="${grep.main.class}" arg2="" />
        </condition>
    </target>

    <!-- 编译任务 -->
    <target name="compile" depends="init">
        <echo level="info">Compile ${ant.project.name}</echo>
        <mkdir dir="${bin.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false">
            <classpath refid="classpath.run"/>
        </javac>
    </target>

    <!-- 打包任务 -->
    <target name="jar" depends="compile">
        <mkdir dir="${jar.dir}"/>
        <jar destfile="${jar.dir}/${ant.project.name}-${DSTAMP}${TSTAMP}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
            <!-- 排除单元测试 -->
            <exclude name="**/*Test.*" />
            <exclude name="**/Test*.*" />
        </jar>
    </target>

    <!-- 运行任务 -->
    <target name="run" depends="compile,jar" description="run program">
        <echo level="info">Run ${ant.project.name}</echo>
        <java fork="true" classname="${main-class}"> <!-- fork:在新的虚拟机内运行该类 -->
            <classpath>
                <path refid="classpath.run"/>
            </classpath>
        </java>
        <!-- <java fork="true" jar="${jar.dir}/${ant.project.name}-${DSTAMP}${TSTAMP}.jar"/> -->
    </target>

    <!-- 兼容Android -->
    <target name="debug" depends="compile,jar" description="debug target">
    </target>

    <!-- 单元测试任务 -->
    <target name="test" depends="compile,jar" description="junit test">
        <echo level="info">Run Junit Test</echo>
        <mkdir dir="${junit.dir}"/>
        <junit printsummary="yes" haltonfailure="no" failureproperty="test.failed" showoutput="ture" >
            <classpath refid="classpath.test"/>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${junit.dir}">
                <fileset dir="${src.dir}">
                    <include name="**/*Test.java"/>
                    <include name="**/Test*.java"/>
                </fileset>
            </batchtest>
        </junit>
        <fail if="test.failed" message="junit test error"/>
    </target>
</project>
