#!/bin/bash

stty stop ''

cur_fil=${BASH_SOURCE[0]}
con_dir=`dirname $cur_fil`
vim_dir=`dirname $con_dir`

export PATH=$vim_dir/bin:$PATH

[ -f /data/opt/env.sh ] && source  /data/opt/env.sh
[ -f $con_dir/fzf.bash ] && source $con_dir/fzf.bash
[ -f ~/.tmp.bash ] && source ~/.tmp.bash

xpwd()
{
    tt=`pwd`
    echo $tt
    export tt
}

alias xvimup='cd $vim_dir; git pull; cd - >/dev/null'
alias xbashrc='vim $cur_fil'
alias xvimrc='vim $vim_dir/vimrc'
alias xtmprc='vim ~/.tmp.bash'
alias xnetstata='netstat -ntpa'
alias xnetstatl='netstat -ntpl'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias sl='ls'
alias rm='rm -i'
alias sudo='sudo env PATH=$PATH'
alias grep='grep --color=auto --exclude-dir=.svn --exclude-dir=.git --exclude=tags'

alias vi0='vim --noplugin'
alias vi='vim'
alias xrs='sed -i "s/\s\+$//g" `find . -maxdepth 1 -type f `'

########### Docker ###########
alias di='docker images'
dirm()
{
    if [[ x$1 == x ]]
    then
        docker images
        echo -ne "\n[RM] Input ID: "
        read image
    else
        image=$@
    fi
    docker rmi $image
}

alias dc='docker container ls -a'
alias dcrma='docker container prune'
dcrm()
{
    if [[ x$1 == x ]]
    then
        docker container ls -a
        echo -ne "\n[RM] Input ID: "
        read container
    else
        container=$@
    fi
    docker container stop $container
    docker container rm $container
}

dcup()
{
    if [[ x$1 == x ]]
    then
        docker container ls -a
        echo -ne "\n[UP] Input ID: "
        read container
    else
        container=$@
    fi
    docker container start $container
}

dcdown()
{
    if [[ x$1 == x ]]
    then
        docker container ls -a
        echo -ne "\n[DOWN] Input ID: "
        read container
    else
        container=$@
    fi
    docker container stop $container
}

alias dv='docker volume ls'
alias dvrma='docker volume prune'
dvrm()
{
    if [[ x$1 == x ]]
    then
        docker volume ls
        echo -ne "\n[RM] Input ID: "
        read vols
    else
        vols=$@
    fi
    docker volume rm $vols
}

drun()
{
    args=($@)
    image=$1
    if [[ x$image == x ]] || [[ x$image != x && "${#image}" -ne "12" ]]
    then
        bashcmd=$image
        docker images
        echo -ne "\n[RUN] Input ID: "
        read image
    else
        bashcmd=${args[@]: 1:$#}
    fi
    if [[ x$image == x ]]
    then
        return
    fi
    docker run -it -d $image $bashcmd
}

dsh()
{
    if [[ x$1 == x ]]
    then
        docker container ls
        echo -ne "\n[SH] Input ID: "
        read container
    else
        container=$1
    fi
    if [[ x$container == x ]]
    then
        return
    fi
    docker exec -it $container bash
}

dlog()
{
    if [[ x$1 == x ]]
    then
        docker container ls
        echo -ne "\n[LOG] Input ID: "
        read container
    else
        container=$1
    fi
    if [[ x$container == x ]]
    then
        return
    fi
    logfile=`docker inspect --format='{{.LogPath}}' $container`
    logdir=`dirname $logfile`
    echo -ne "[LOG] Clear $logdir/${container}**-json.log (Y/n): "
    read result
    if [[ x$result != xN ]] && [[ x$result != xn ]]
    then
        sudo truncate -s 0 $logfile
    fi
    docker logs --timestamps --follow $container
}

dexe()
{
    args=($@)
    container=$1
    if [ "${#container}" -eq "12" ]
    then
        bashcmd=${args[@]: 1:$#}
        docker exec $container bash -c "$bashcmd"
    else
        docker container ls
        echo -ne "\n[SH] Input ID: "
        read container
        echo ""
        docker exec $container bash -c "$@"
    fi
}

dip()
{
    container=$1
    if [ "${#container}" -ne "12" ]
    then
        docker container ls
        echo -ne "\n[IP] Input ID: "
        read container
    fi
    if [[ x$container == x ]]
    then
        return
    fi
    docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $container
}

dmount()
{
    container=$1
    if [ "${#container}" -ne "12" ]
    then
        docker container ls
        echo -ne "\n[MOUNT] Input ID: "
        read container
    fi
    if [[ x$container == x ]]
    then
        return
    fi
    jsontool=`which jq`
    if [[ x$jsontool == x ]]
    then
        jsontool=python -m json.tool
    fi
    docker inspect -f '{{ json .Mounts }}' $container | $jsontool
}

dcst()
{
    container=$1
    if [ "${#container}" -ne "12" ]
    then
        docker container ls
        echo -ne "\n[STAT] Input ID: "
        read container
    fi
    docker stats --no-stream $container
}
