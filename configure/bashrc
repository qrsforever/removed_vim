#!/bin/bash

stty stop ''

cur_fil=${BASH_SOURCE[0]}
con_dir=`dirname $cur_fil`
vim_dir=`dirname $con_dir`

export PATH=$vim_dir/bin:$PATH

[ -f $con_dir/fzf.bash ] && source $con_dir/fzf.bash
[ -f ~/.tmp.bash ] && source ~/.tmp.bash

xpwd()
{
    tt=`pwd`
    echo $tt
    export tt
}

alias upvim='cd $vim_dir; git pull; cd - >/dev/null'
alias ebashrc='vim $cur_fil'
alias evimrc='vim $vim_dir/vimrc'

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias sl='ls'
alias rm='rm -i'
alias sudo='sudo env PATH=$PATH'
alias grep='grep --color=auto --exclude-dir=.svn --exclude-dir=.git --exclude=tags'

alias 0vi='vim --noplugin'
alias vi='vim'
alias xrs='sed -i "s/\s\+$//g" `find . -maxdepth 1 -type f `'

alias lports='netstat -antp'

########### Docker ###########
alias di='docker images'
dirm()
{
    if [[ x$1 == x ]]
    then
        docker images
        echo -ne "\n[RM] Input ID: "
        read image
    else
        image=$1
    fi
    docker rmi $image
}

alias dc='docker container ls -a'
dcrm()
{
    if [[ x$1 == x ]]
    then
        docker container ls -a
        echo -ne "\n[RM] Input ID: "
        read container
    else
        container=$1
    fi
    docker container stop $container
    docker container rm $container
}

alias dcrma='docker container prune'
alias dcstart='docker container start'
alias dcstop='docker container stop'

alias dv='docker volume ls'
alias dvrm='docker volume rm'

alias dip='docker inspect --format="{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}"'

drun()
{
    args=($@)
    image=$1
    if [[ x$image == x ]]
    then
        docker images
        echo -ne "\n[RUN] Input ID: "
        read image
    fi
    if [ "${#image}" -eq "12" ]
    then
        bashcmd=${args[@]: 1:$#}
    else
        bashcmd=''
    fi
    docker run -it -d $image $bashcmd
}

dsh()
{
    if [[ x$1 == x ]]
    then
        docker container ls -a
        echo -ne "\n[SH] Input ID: "
        read container
    else
        container=$1
    fi
    docker exec -it $container bash
}


dlog()
{
    if [[ x$1 == x ]]
    then
        docker container ls -a
        echo -ne "\n[LOG] Input ID: "
        read container
    else
        container=$1
    fi
    docker logs --timestamps --follow $container
}

dexe()
{
    args=($@)
    container=$1
    if [ "${#container}" -eq "12" ]
    then
        bashcmd=${args[@]: 1:$#}
        docker exec $container bash -c "$bashcmd"
    else
        docker container ls -a
        echo -ne "\n[SH] Input ID: "
        read container
        echo ""
        docker exec $container bash -c "$@"
    fi
}
