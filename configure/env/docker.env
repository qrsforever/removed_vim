#!/bin/bash

########### Docker: gpasswd -a ${USER} docker; newgrp docker ###########

alias dst='docker stats'
alias dil='docker history'

# docker()
# {
#     if [[ "${1}" = "tags" ]]
#     then
#         docker_tag_search $2;
#     else
#         command docker "$@";
#     fi
# }

docker_tag_search()
{
    image="$1"
    tags=`wget -q https://registry.hub.docker.com/v1/repositories/${image}/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}'`
    if [ -n "$2" ]
    then
        tags=`echo "${tags}" | egrep "$2" `
    fi
    echo "${tags}"
}

dici()
{
    # /etc/docker/daemon.json add "insecure-registries": [ip:port]
    # sudo systemctl restart docker
    if [[ $# != 3 ]]
    then
        echo "Useage: dici host port image[:tag]"
    else
        host=$1
        port=$2
        image=$3
        image_n=${image%%:*}
        image_t=${image##*:}
        exist=`curl -XGET http://$host:$port/v2/${image_n}/manifests/${image_t} 2>/dev/null | egrep "errors"`
        if [[ x$exist != x ]]
        then
            docker tag $image $host:$port/$image
            docker push $host:$port/$image
            echo "done"
		fi
        curl -XGET http://$host:$port/v2/${image_n}/tags/list
        # curl $host:$port/v2/_catalog
    fi
}


#-----------------------------------------------------------------
# image
# https://github.com/docker/cli/blob/master/cli/command/formatter/image.go
#-----------------------------------------------------------------

alias di='docker images'
alias dia='docker images -a'
alias dirmA='docker rmi $(docker images) 2>/dev/null'
alias dirma='docker rmi `docker images | egrep  "<none>" | awk "{print $3}"` 2>/dev/null'
# alias dirma='docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'


__list_images() {
    docker images --format="{{.ID}} {{.Repository}}:{{.Tag}}" | tr -s " " | tr " " "$SED_DELIM"
}

__get_image() {
    local -n __image=$1
    if [[ $# == 0 ]] || [[ ${#__image} -le 3 ]]
    then
        local args=($(__list_images))
        [[ x${__image} == x ]] && __select_item __image ${args[@]} NONE || __image=${args[$((${__image} - 1))]}
        [[ x${__image} == x ]] && return $RET_ERR
        [[ "${__image}" == "invalid" ]] && return $RET_ERR
        __image=${__image%%${SED_DELIM}*}
    fi
    return $RET_OK
}

dirm() {
    local image=$1
    if (( $#  > 1 ))
    then
        for image in ${@}
        do
            __echo_run docker rmi $image
        done
    else
        __get_image image
        [[ $? == $RET_OK ]] && __echo_run docker rmi $image
    fi
}

dii() {
    local image=$1
    __get_image image
    [[ $? == $RET_OK ]] && __echo_run docker image inspect $image
}

did()
{
    local image=$1
    __get_image image
    [[ $? == $RET_OK ]] && docker image inspect --format='{{.RepoTags}} {{.Id}} {{.Parent}}' $(docker image ls -q --filter since=$image)
}


#-----------------------------------------------------------------
# container
# https://github.com/docker/cli/blob/master/cli/command/formatter/container.go
#-----------------------------------------------------------------

# {{printf \"%.28s\" .Names}}
alias dca='docker container ls --format "table {{.ID}}\t$(__gotmpl_slice .Image -24)\t{{.Command}}\t{{.Status}}\t$(__gotmpl_slice .Names 28)\t{{.Networks}}"'
alias dcA='docker container ls -a --format "table {{.ID}}\t$(__gotmpl_slice .Image -24)\t{{.Command}}\t{{.Status}}\t$(__gotmpl_slice .Names 28)\t{{.Networks}}"'
alias dc='dca|egrep -v "k8s_POD"'
alias dcc='docker ps | egrep -v "k8s_POD"'
alias dcC='docker ps -a | egrep -v "k8s_POD"'
alias dcrma='docker container prune -f'

__list_containers() {
    docker container ls -a \
        --format="{{.ID}} $(__gotmpl_slice .Names 32) $(__gotmpl_slice .Image -28)" \
        | egrep -v "k8s_POD" \
        | tr -s " " \
        | tr " " "$SED_DELIM"
}

__get_container() {
    local -n __container=$1
    if [[ $# == 0 ]] || [[ ${#__container} -le 2 ]]
    then
        local args=($(__list_containers))
        [[ x${__container} == x ]] && __select_item __container ${args[@]} container || __container=${args[$((${__container} - 1))]}
        [[ x${__container} == x ]] && return $RET_ERR
        [[ "${__container}" == "invalid" ]] && return $RET_ERR
        __container=${__container%%${SED_DELIM}*}
    fi
    return $RET_OK
}

dcrm() {
    local container=$1
    if (( $#  > 1 ))
    then
        for container in ${@}
        do
            __echo_run docker container stop $container 2>/dev/null
            __echo_run docker container rm $container
        done
    else
        __get_container container
        if [[ $? == $RET_OK ]]
        then
            __echo_run docker container stop $container 2>/dev/null
            __echo_run docker container rm $container
        fi
    fi
}

dci() {
    local container=$1
    __get_container container
    [[ $? == $RET_OK ]] && __echo_run docker inspect $container
}


#-----------------------------------------------------------------
# network
# docker network create myNetwork
# docker network connect myNetwork web1
# docker network inspect myNetwork
#-----------------------------------------------------------------

alias dn='docker network ls'
alias dnrma='docker network prune -f'

dni() {
    local net=$1
    if [[ $# == 0 ]] || [[ ${#net} -le 3 ]]
    then
        local args=$(docker network ls --format="{{.ID}} {{.Driver}} {{printf \"%.16s\" .Name}}" \
            | tr " " "$SED_DELIM")

        [[ x${net} == x ]] && __select_item net ${args[@]} NONE || net=${args[$((${net} - 1))]}
        [[ x${net} == x ]] && return $RET_ERR
        [[ "${net}" == "invalid" ]] && return $RET_ERR
        net=${net%%${SED_DELIM}*}
    fi
    __echo_run docker network inspect $net
}


dnrm() {
    local net=$1
    if [[ $# == 0 ]] || [[ ${#net} -le 3 ]]
    then
        local args=$(docker network ls --format="{{.ID}} {{.Driver}} {{.Name}}" \
            | tr " " "$SED_DELIM")

        [[ x${net} == x ]] && __select_item net ${args[@]} NONE || net=${args[$((${net} - 1))]}
        [[ x${net} == x ]] && return $RET_ERR
        [[ "${net}" == "invalid" ]] && return $RET_ERR
        net=${net%%${SED_DELIM}*}
    fi
    __echo_run docker network rm $net
}


alias dv='docker volume ls'
alias dvrma='docker volume prune -f'
dvrm()
{
    if [[ x$1 == x ]]
    then
        docker volume ls
        echo -ne "\n[RM] Input ID: "
        read vols
    else
        vols=$@
    fi
    docker volume rm $vols
}


#-----------------------------------------------------------------
# utils
#-----------------------------------------------------------------

drun() {
    # drun b6bcb9632c86 -- --network host
    local image=$@ cmdargs=""
    is-array-contains $@ "--"
    if [[ $? == 1 ]]
    then
        __split_args image cmdargs -- "$@"
        image=${image[0]}
    else
        image=$1
    fi

    cmdargs="-it --rm --entrypoint sh ${cmdargs[@]}"

    if [[ x$image == x ]] || [[ ${#image} -le 3 ]]
    then
        local args=($(__list_images))
        [[ x${image} == x ]] && __select_item image ${args[@]} NONE  || image=${args[$((${image} - 1))]}
        [[ x${image} == x ]] && return $RET_ERR
        [[ "${image}" == "invalid" ]] && return
        image=${image%%${SED_DELIM}*}
    fi
    __echo_run docker run $cmdargs $image
}

dsh() {
    local container=$1
    __get_container container
    if [[ $? == $RET_OK ]]
    then
        [[ x"$(docker exec $container command -v bash)" == x ]] && sh="sh" || sh="bash"
        __echo_run docker exec -u 0 -it $container $sh
    fi
}

# container=`docker container ls -a --format "{{.ID}}" | head -n $id | tail -n 1`
dlog() {
    if [[ x$1 == xhelp ]] || [[ x$1 == xh ]]
    then
        echo "Usage: dlog [container] [--] [num || num[m|h][@[m|h]] || 2013-01-02T13:23:37Z[@2013-01-03T13:23:37Z]]"
        return
    fi
    local container=$1 cmd="200"
    is-array-contains $@ "--"
    if [[ $? == $RET_OK ]]
    then
        __split_args container cmd -- "$@"
        container=${container[0]}
    fi
    __get_container container
    [[ $? == $RET_ERR ]] && return

    cmd1=$(echo ${cmd} | cut -d\@  -f1)
    cmd2=$(echo ${cmd} | cut -d\@  -f2)
    if [[ ${cmd1: -1} == 'm' ]] || [[ ${cmd1: -1} == 'h' ]] || [[ ${cmd1: 10:1} == 'T' ]]
    then
        cmd="--since $cmd1"
        if [[ $cmd1 != $cmd2 ]]
        then
            if [[ ${cmd2: -1} == 'm' ]] || [[ ${cmd2: -1} == 'h' ]] || [[ ${cmd2: 10:1} == 'T' ]]
            then
                cmd="$cmd --until $cmd2"
            else
                cmd="$cmd --follow"
            fi
        fi
    else
        is-digit $cmd1
        if [[ $? == 1 ]]
        then
            if (( $cmd1 == 0 ))
            then
                cmd1=10
                logfile=$(docker inspect --format='{{.LogPath}}' $container)
                sudo truncate -s 0 $logfile
            fi
            cmd="--tail $cmd1 --follow"
        fi
    fi
    __echo_run docker logs $cmd $container 2>&1
}

dexe() {
    if [[ x$1 == xhelp ]] || [[ x$1 == xh ]]
    then
        echo "Usage: dexe [container] [-- command]"
        return
    fi
    local container=$1 cmd="pwd"
    is-array-contains $@ "--"
    if [[ $? == $RET_OK ]]
    then
        __split_args container cmd -- "$@"
        container=${container[0]}
    fi
    __get_container container
    [[ $? == $RET_ERR ]] && return

    __echo_run docker exec $container sh -c "$cmd"
}

dip() {
    local container=$1
    __get_container container
    if [[ $? == $RET_OK ]]
    then
        __echo_run "docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container"
    fi
}

dmount() {
    local container=$1
    __get_container container
    if [[ $? == $RET_OK ]]
    then
        jsontool=`command -v jq`
        if [[ x$jsontool == x ]]
        then
            jsontool=python -m json.tool
        fi
        __echo_run docker inspect -f '{{ json .Mounts }}' $container | $jsontool
    fi
}

dcst()
{
    local container=$1
    __get_container container
    [[ $? == $RET_OK ]] && __echo_run docker stats --no-stream $container
}


#-----------------------------------------------------------------
# register
#-----------------------------------------------------------------

DOCKER_REGISTRY_SERVER=${DOCKER_REGISTRY_SERVER:-"http://localhost:5000/v2"}
DOCKER_REGISTRY_DATA_DIR=${DOCKER_REGISTRY_DATA_DIR:-"/data/docker-registry/data/docker/registry/v2"}

__dr_delete_files() {
    local cid=$(docker container ls --filter label=com.docker.compose.service=registry --filter status=running -q)
    [[ x$cid == x ]] && return

    local img=$1
    local tag=$2
    local key="Docker-Content-Digest:"
    local accept="Accept: application/vnd.docker.distribution.manifest.v2+json"
    local ddd=/var/lib/registry/docker/registry

    reference=$(curl -s -H "$accept" -X GET -I ${DOCKER_REGISTRY_SERVER}/${img}/manifests/${tag} | egrep $key | awk -F ' ' '{printf "%s",$2}' | tr -d $'\r')
    # reference=${reference%$'\r'}
    if [[ x$reference != x ]]
    then
        curl -X DELETE ${DOCKER_REGISTRY_SERVER}/${img}/manifests/${reference}
        echo "Delete v2/repositories/${img}/_manifests/tags/${tag}/index/sha256/${reference:7}"
        echo "Delete v2/repositories/${img}/_manifests/revisions/sha256/${reference:7}"
        docker exec -it $cid sh -c "rm -rf ${ddd}/v2/repositories/${img}/_manifests/tags/${tag}/index/sha256/${reference:7}"
        docker exec -it $cid sh -c "rm -rf ${ddd}/v2/repositories/${img}/_manifests/revisions/sha256/${reference:7}"
    fi
    docker exec -it $cid sh -c "[ \"\`ls -A ${ddd}/v2/repositories/${img}/_manifests/tags\`\" = \"\" ] && rm -rf ${ddd}/v2/repositories/${img}"
    docker exec -it $cid sh -c "registry garbage-collect --dry-run=true --delete-untagged=true /etc/docker/registry/config.yml"
}

dr() {
    curl -s -X GET ${DOCKER_REGISTRY_SERVER}/_catalog | jq -r 'foreach .repositories[] as $_x (0;.+1; "\(.) \($_x)")'
}

drt() {
    local result=$1
    local args=($(curl -s -X GET ${DOCKER_REGISTRY_SERVER}/_catalog | jq -r '.repositories[]' | tr '\n' ' '))
    [ -z $result ] && __select_item result ${args[@]} NONE
    if (( ${#result} <= 2 ))
    then
        result=${args[$(($result - 1))]}
    fi
    curl -s -X GET ${DOCKER_REGISTRY_SERVER}/${result}/tags/list | jq
}

drrm() {
    local img=$1 tag=$2
    if [ -z $img ]
    then
        local args=($(curl -s -X GET ${DOCKER_REGISTRY_SERVER}/_catalog | jq -r '.repositories[]' | tr '\n' ' '))
        __select_item img ${args[@]} NONE
    fi
    if [ -z $tag ]
    then
        local args=($(curl -s -X GET ${DOCKER_REGISTRY_SERVER}/${img}/tags/list | jq -r '.tags[]' | tr '\n' ' '))
        for tag in ${args[@]}
        do
            read -p "Delete ${img}:${tag} (y/N):" input
            if [[ $input == y ]] || [[ $input == Y ]]
            then
                # __dr_delete_files $img $tag
                if [[ -d ${DOCKER_REGISTRY_DATA_DIR} ]]
                then
                   REGISTRY_DATA_DIR=${DOCKER_REGISTRY_DATA_DIR} 0del_dr_image.py --image ${img}:${tag}
                else
                    echo "no set DOCKER_REGISTRY_DATA_DIR"
                    return
                fi
            fi
        done
    else
        read -p "Delete ${img}:${tag} (y/N):" input
        if [[ $input == y ]] || [[ $input == Y ]]
        then
            # __dr_delete_files $img $tag
            if [[ -d ${DOCKER_REGISTRY_DATA_DIR} ]]
            then
                REGISTRY_DATA_DIR=${DOCKER_REGISTRY_DATA_DIR} 0del_dr_image.py --image ${img}:${tag}
            else
                echo "no set DOCKER_REGISTRY_DATA_DIR"
                return
            fi
        fi
    fi
}

#-----------------------------------------------------------------
# kafka wurstmeister/kafka
#-----------------------------------------------------------------


