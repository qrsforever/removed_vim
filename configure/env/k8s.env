#!/bin/bash

source <(kubectl completion bash)

export K8S_NS_FILE=${K8S_NS_FILE:- /tmp/.k8s_ns}

K8S_CA_FILE='/etc/kubernetes/pki/ca.crt'
IGNORE_NAMESPACE=(kube-node-lease kube-public kubernetes-dashboard)

__read_ns() {
    [ ! -f $K8S_NS_FILE ] && echo "--namespace default" || echo "--namespace $(cat $K8S_NS_FILE)"
}

alias k='kubectl'
alias KubeCtl='kubectl -n kube-system'
alias Kubectl='kubectl $(__read_ns)'
alias Wubectl='watch -d -t -n 1 kubectl $(__read_ns)'

__k8s_echo_run() {
    cmd="$*"
    if [[ $1 == Kubectl ]]
    then
        ns=$(__read_ns)
        cmd=${cmd/Kubectl/kubectl $ns}
    fi
    echo -e "\n\033[1;31m$cmd\033[0;m\n"
    $cmd
}


#-----------------------------------------------------------------
# basic
#-----------------------------------------------------------------

alias ka='kubectl apply --recursive --wait=false -f '
alias ku='kubectl delete --recursive --wait -f'
alias kal='Kubectl get all'
alias kall='kubectl get all -A'
alias kres='kubectl api-resources --verbs=list'

# help
kh() {
    echo "export K8S_NS_FILE=/tmp/.k8s_ns"
    echo "kk: select namespace"
    echo "kg: generate join token"
    echo "kN: namespaces"
    echo "kn: nodes"
    echo -e "\t knsh: ssh node"
    echo -e "\t knill: cordon"
    echo -e "\t kndown: drain"
    echo -e "\t knup: uncordon"
    echo "kp: pods"
    echo -e "\t kpro: rollout,restart"
    echo "kd: deployments"
    echo -e "\t kds: scale"
    echo -e "\t kdro: rollout,restart"
    echo "ks: services"
    echo "ki: list ingress"
    echo "km: configmap"
    echo "kM: secret"
    echo "kj: jobs"
    echo "kcj: cronjobs"
    echo "kdss: deamonsets"
    echo "kres: list all resources"
    echo "--------------------------------------------------------------------------"
    echo "y: yaml, i: describe, l[l]: label, a[a]: annotations, rm: remove"
    echo "--------------------------------------------------------------------------"
    echo "ksh, ka, ku, kal, kall"
    echo "--------------------------------------------------------------------------"
    echo "klog, klogn:namespace, klogc:container, klogp:pod, wklog:wait, pklog:prefix"
    echo -e "\t klog [pod] -- 100, klog [pod] -- 10m, klog [pod] -- 2022-03-07T07:00:00"
    echo -e "\t klog [pod] -- 100@50, klog [pod] -- 10m@5m, klog [pod] -- 10m@100"
    echo -e "\t klog [pod] -- 2022-03-07T07:00:00@100, klog [pod] -- 2022-03-07T07:00:00@10m"
    echo -e "\t klog [pod] -- 2022-03-07T07:00:00@2022-03-07T07:10:00"
    echo "--------------------------------------------------------------------------"
}

# 生成加入连接
kg() {
    token=$(kubeadm token list --one-output --skip-headers  -o jsonpath="{.token} " | cut -d\  -f1)
    if [[ x$token == x ]]
    then
        kubeadm token create --print-join-command
        return
    fi
    dgst=$(openssl x509 -pubkey -in ${K8S_CA_FILE} \
        | openssl rsa -pubin -outform der 2>/dev/null \
        | openssl dgst -sha256 -hex | sed 's/^.* //')
    url=$(kubectl cluster-info | grep -e "Kubernetes.*at" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g")
    url=${url##*\ }
    echo "kubeadm join ${url:8} --token ${token} --discovery-token-ca-cert-hash sha256:${dgst}"
}

# 设定默认namespace
kk() {
    namespaces=()
    def_ns=$(__read_ns | cut -c 13-)
    local i=0
    __line__
    for item in $(kubectl get namespaces --no-headers -o custom-columns="NAME:.metadata.name")
    do
        is-array-contains "${IGNORE_NAMESPACE[@]}" $item
        [[ $? == 1 ]] && continue

        namespaces[$i]="$item"
        (( i++ ))
        [[ $item == $def_ns ]] && printf "   %3d. * %s\n" $i $item || printf "   %3d.   %s\n" $i $item
    done
    __line__
    read -p "Select: " select
    if (( 0 < select && select <= i ))
    then
        (( select-- ))
        echo "${namespaces[$select]}" > $K8S_NS_FILE
    fi
}

alias KK='export K8S_NS_FILE=/tmp/.kk_ns; kk'

# 查询images
# ki() {
#     Kubectl get pods "$@" --no-headers -o custom-columns=':metadata.name,:spec.containers[*].image' \
#         | tr -s ' ' \
#         | sed 's/ /\n  /' \
#         | sed '/^  /s/,/\n  /' \
#         | awk -F : '!/^ / {print "'$(c yellow+ b)'"$0"'${c}'"} /^ / {print "'$(c)'"$1":'$(c cyan)'"$2"'$(c)'"}' \
#         | column -s : -t
# }

# 查询volumes
kv() {
    local pod=$1
    if [[ $# == 0 ]]
    then
        local args=($(Kubectl get pods --no-headers -o custom-columns=:.metadata.name | tr '\n' ' '))
        __select_item pod ${args[@]} NONE
    else
        shift
    fi
    Kubectl get pods "$pod" "$@" -o go-template='
        {{- range .spec.volumes }}
            {{- if .configMap }}{{ printf "ConfigMap: %s\n  ConfigMap: %s\n" .name .configMap.name }}
            {{- else if .secret }}{{ printf "Secret: %s\n  Secret: %s\n" .name .secret.secretName }}
            {{- else if .persistentVolumeClaim }}{{ printf "PVC: %s\n  PVC: %s\n" .name .persistentVolumeClaim.claimName }}
            {{- else if .hostPath }}{{ printf "HostPath: %s\n  Path: %s\n" .name .hostPath.path }}
            {{- else if .emptyDir }}{{ printf "EmptyDir: %s\n" .name }}
            {{- else }}{{ printf "EmptyDir: %s\n" .name }}{{ end }}
        {{- end }}' \
        | sed -E 's/^([^ ].*)/'$(c yellow+ b)'\1'$(c)'/'
}

# 查询annotations
kann() {
    local args regex=.*
    __split_args args regex -- "$@"
    Kubectl get "${args[@]}" -o json | jq -r '
        if .items then
            .items[]
        else
            .
        end
        | .metadata
        | if (.name | test("'"$regex"'")) then
            "'$(c yellow+ b)'\(.name)'$(c)'",
            if .annotations then
                .annotations | to_entries[] | "  '$(c)'\(.key):'$(c cyan)'\(.value)'$(c)'"
            else
                "  '$(c)'<none>'$(c)'"
            end
          else
              empty
          end' \
    | column -s : -t
}

# 查询labels
klab() {
    local args regex=.*
    __split_args args regex -- "$@"
    Kubectl get "${args[@]}" --no-headers -o custom-columns=':metadata.name,:metadata.labels' \
        | awk "\$1~/$regex/" \
        | sed 's/map\[//;s/\]//' \
        | tr -s ' ' \
        | tr ' ' '\n' \
        | sed '/:/s/^/  /' \
        | awk -F : '!/^ / {print "'$(c yellow+ b)'"$0"'$(c)'"} /^ / {print "'$(c)'"$1":'$(c cyan)'"$2"'$(c)'"}' \
        | column -s : -t
}

#-----------------------------------------------------------------
# nodes
#-----------------------------------------------------------------

__new_node_pod() {
    node=$1
    kubectl create -o name -f - <<EOF
apiVersion: v1
kind: Pod
metadata:
  generateName: ssh-${node}-
  labels:
    plugin: ssh-node
spec:
  nodeName: ${node}
  containers:
  - name: ssh-node
    image: busybox
    imagePullPolicy: IfNotPresent
    command: ["chroot", "/host"]
    tty: true
    stdin: true
    stdinOnce: true
    securityContext:
      privileged: true
    volumeMounts:
    - name: host
      mountPath: /host
  volumes:
  - name: host
    hostPath:
      path: /
  hostNetwork: true
  hostIPC: true
  hostPID: true
  restartPolicy: Never
EOF
}

__ssh_node() {
    (
        set -e
        pod=$(__new_node_pod $1)
        __del_node_pod() {
            kubectl delete $pod --wait=true
        }
        trap __del_node_pod EXIT
        kubectl wait --for=condition=Ready $pod >/dev/null
        kubectl attach -it -q $pod -c ssh-node
    )
}

__get_node() {
    local -n __node=$1
    if [[ $# == 0 ]] || [[ ${#__node} -le 3 ]]
    then
        local args=($(kubectl get nodes \
            --no-headers \
            --output custom-columns=':metadata.name,:.status.addresses[?(@.type=="InternalIP")].address' \
            | tr -s " " | tr " " "$SED_DELIM"))

        [[ x${__node} == x ]] && __select_item __node ${args[@]} NONE || __node=${args[$((${__node} - 1))]}
        [[ x${__node} == x ]] && return $RET_ERR
        [[ "${__node}" == "invalid" ]] && return $RET_ERR
        __node=${__node%%${SED_DELIM}*}
    fi
    return $RET_OK
}

__set_node_eip() {
    node=$1
    pod=$(__new_node_pod $node)
    [[ x$pod == x ]] && return
    kubectl wait --for=condition=Ready $pod >/dev/null
    ip=$(kubectl exec -i ${pod} -c ssh-node -- wget -qO - ifconfig.co)
    kubectl delete $pod --wait=true 2>&1 > /dev/null
    if [[ x$ip == x ]]
    then
        return
    fi

    # delete
    # kubectl label --overwrite nodes $node private/eip- > /dev/null
    kubectl label --overwrite nodes $node private/eip=${ip} >/dev/null
}

alias wkn='kubectl get nodes --watch'
alias kn='kubectl get nodes'
alias wknw='kubectl get nodes -o wide --watch'
alias knw='kubectl get nodes -o wide'
alias knyy='kubectl get nodes -o yaml'
alias knii='kubectl describe nodes'
alias knll='klab nodes'
alias knaa='kann nodes'

knn() {
    local NAME="NAME:.metadata.name"
    # local STATUS="STATUS:.status.conditions[?(@.reason=='KubeletReady')].type"
    local IP1="INTERNAL-IP:.status.addresses[?(@.type=='InternalIP')].address"
    # local IP2="EXTERNAL-IP:.status.addresses[?(@.type=='ExternalIP')].address"
    local IP2="EXTERNAL-IP:.metadata.labels.private/eip"
    local CPU="CPU:.status.allocatable.cpu"
    local MEMORY="MEMORY:.status.allocatable.memory"
    local GPU="GPU:.status.allocatable.nvidia\.com/gpu"
    local TAINETS="TAINTS:.spec.taints"

    kubectl get nodes -o custom-columns="$NAME,$IP1,$IP2,$CPU,$MEMORY,$GPU,$TAINETS" \
        | sed 's/\[//g' \
        | sed 's/\]//g' \
        | sed 's/mapeffect\://g' \
        | sed 's/\ key//g' \
        | sed 's/\ value\:/=/g' \
        | CODE=$(typeset -f __set_node_eip -f __new_node_pod) \
        awk '{if ($3 == "<none>"){system("bash -c \47eval \42$CODE\42; __set_node_eip \42"$1"\42\47")} {print $0}}'
}

knill() {
    local node=$1
    __get_node node
    [[ $? == $RET_OK ]] && __echo_run kubectl cordon $node
}

kndown() {
    local node=$1
    __get_node node
    [[ $? == $RET_OK ]] && __echo_run kubectl drain --ignore-daemonsets $node
}

knup() {
    local node=$1
    __get_node node
    [[ $? == $RET_OK ]] && __echo_run kubectl uncordon $node
}

knsh() {
    local node=$1
    __get_node node
    [[ $? == $RET_OK ]] && __ssh_node $node
}


kny() {
    local node=$1
    __get_node node
    [[ $? == $RET_OK ]] && __echo_run kubectl get nodes -o yaml $node
}

kni() {
    local node=$1
    __get_node node
    [[ $? == $RET_OK ]] && __echo_run kubectl describe nodes $node
}

knl() {
    local node=$1
    __get_node node
    [[ $? == $RET_OK ]] && klab nodes $node
}

kna() {
    local node=$1
    __get_node node
    [[ $? == $RET_OK ]] && kann nodes $node
}

knrm() {
    local node=$1
    __get_node node
    [[ $? == $RET_ERR ]] && return
    __echo_run kubectl drain $node --delete-emptydir-data --force --ignore-daemonsets
    __echo_run kubectl delete nodes $node
    # run kubeadm reset on $node
}

#-----------------------------------------------------------------
# namespaces
#-----------------------------------------------------------------

alias kN='kubectl get namespaces'
alias kNw='kubectl get namespaces -o wide'
alias kNy='kubectl get namespaces -o yaml'
alias kNi='kubectl describe namespaces'
alias kNrm='kubectl delete namespaces'


#-----------------------------------------------------------------
# pods
#-----------------------------------------------------------------

__list_pods() {
    Kubectl get pods --no-headers -o json | jq -r '.items[] |
        if .status.containerStatuses then
            "\(.metadata.name)'$SED_DELIM'\(.status.containerStatuses[]|.name)@\(.spec.nodeName)"
        else
            "\(.metadata.name)'$SED_DELIM'null@\(.spec.nodeName)"
        end'
}

__get_pod() {
    local -n __pod=$1
    if [[ $# == 0 ]] || [[ ${#__pod} -le 3 ]]
    then
        local args=($(Kubectl get pods \
            --no-headers \
            --output json \
            | jq -r '.items[] |
            "\(.metadata.name)'$SED_DELIM'\(.spec.nodeName)"'))

        [[ x${__pod} == x ]] && __select_item __pod ${args[@]} NONE || __pod=${args[$((${__pod} - 1))]}
        [[ x${__pod} == x ]] && return $RET_ERR
        [[ "${__pod}" == "invalid" ]] && return $RET_ERR
        __pod=${__pod%%${SED_DELIM}*}
    fi
    return $RET_OK
}

alias skp='KubeCtl get pods'
alias skpw='KubeCtl get pods -o wide'
alias skpy='KubeCtl get pods -o yaml'
alias skpi='KubeCtl describe pods'

alias wkp='Wubectl get pods'
alias kp='Kubectl get pods'
alias kpw='Kubectl get pods -o wide'
alias kpyy='Kubectl get pods -o yaml'
alias kpii='Kubectl describe pods'
alias kpci='Kubectl get pods  -o jsonpath="{.items[*].spec.containers[*].image}" | tr -s "[[:space:]]" "\n" | sort | uniq -c'
alias kpll='klab pods'
alias kpaa='kann pods'

kpp() {
    local NAME="NAME:.metadata.name"
    # local NAMESPACE="NAMESPACE:.metadata.namespace"
    local CONTAINER="CONTAINER:.spec.containers[*].name"
    local REQ_CPU="REQ_CPU:.spec.containers[*].resources.requests.cpu"
    local LIM_CPU="LIM_CPU:.spec.containers[*].resources.limits.cpu"
    local REQ_MEM="REQ_MEM:.spec.containers[*].resources.requests.memory"
    local LIM_MEM="LIM_MEM:.spec.containers[*].resources.limits.memory"
    local REQ_GPU="REQ_GPU:.spec.containers[*].resources.requests.nvidia\.com/gpu"
    local LIM_GPU="LIM_GPU:.spec.containers[*].resources.limits.nvidia\.com/gpu"

    Kubectl get pods -o custom-columns="$NAME,$CONTAINER,$REQ_CPU,$LIM_CPU,$REQ_MEM,$LIM_MEM,$REQ_GPU,$LIM_GPU"
}

kpy() {
    local pod=$1
    __get_pod pod
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl get pods -o yaml $pod
}

kpi() {
    local pod=$1
    __get_pod pod
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl describe pods $pod
}

kpl() {
    local pod=$1
    __get_pod pod
    [[ $? == $RET_OK ]] && klab pods $pod
}

kpa() {
    local pod=$1
    __get_pod pod
    [[ $? == $RET_OK ]] && kann pods $pod
}

kprm() {
    local pod=$1
    __get_pod pod
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl delete pods $pod --force
}

kpro() {
    local pod=$1
    __get_pod pod
    if [[ $? == $RET_OK ]]
    then
        echo "Kubectl get pods ${pod} -o yaml | kubectl replace --force -f -"
        Kubectl get pods ${pod} -o yaml | kubectl replace --force -f -
    fi
}


#-----------------------------------------------------------------
#  containers
#-----------------------------------------------------------------

alias kc='__list_pods | awk "{printf \"%3d  %s\n\", NR,\$1}" | column -s \~ -t'

kcc() {
    items=($(Kubectl get pods -o jsonpath="{.items}" \
        | jq -r '.[]
            | "\(.metadata.name):\(.spec.nodeName);\(
            .status.containerStatuses[] | "\(.containerID | .[9:21])(\(.name)"))"'))

    declare -A mydict

    for line in ${items[@]}
    do
        key=`echo $line | cut -d\; -f 1`
        val=`echo $line | cut -d\; -f 2`
        mydict[${key}]+="\n;${val}"
    done

    local result
    for key in ${!mydict[@]}
    do
        result+="$(c yellow+ b)${key}$(c)${mydict[${key}]}\n"
    done
    echo -e ${result} | sed 's/^;/\t  /' | column -s : -t
    unset mydict
}


#-----------------------------------------------------------------
# deployments
#-----------------------------------------------------------------

alias skd='KubeCtl get deployments'
alias skdw='KubeCtl get deployments -o wide'
alias skdy='KubeCtl get deployments -o yaml'

alias wkd='Wubectl get deployments'
alias kd='Kubectl get deployments'
alias kdw='Kubectl get deployments -o wide'
alias kdyy='Kubectl get deployments -o yaml'
alias kdii='Kubectl describe deployments'
alias kdll='klab deployments'
alias kdaa='kann deployments'

__get_deploy() {
    local -n __deploy=$1
    if [[ $# == 0 ]] || [[ ${#__deploy} -le 3 ]]
    then
        local args=($(Kubectl get deployments \
            --no-headers \
            --output json \
            | jq -r '.items[] |
            "\(.metadata.name)'$SED_DELIM'\(.spec.replicas)"'))

        [[ x${__deploy} == x ]] && __select_item __deploy ${args[@]} deployment || __deploy=${args[$((${__deploy} - 1))]}
        [[ x${__deploy} == x ]] && return $RET_ERR
        [[ "${__deploy}" == "invalid" ]] && return $RET_ERR
        __deploy=${__deploy%%${SED_DELIM}*}
    fi
    return $RET_OK
}

kdy() {
    local deploy=$1
    __get_deploy deploy
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl get deployments -o yaml $deploy
}

kdi() {
    local deploy=$1
    __get_deploy deploy
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl describe deployments $deploy
}

kdl() {
    local deploy=$1
    __get_deploy deploy
    [[ $? == $RET_OK ]] && klab deployments $deploy
}

kda() {
    local deploy=$1
    __get_deploy deploy
    [[ $? == $RET_OK ]] && kann deployments $deploy
}

kdrm() {
    local deploy=$1
    __get_deploy deploy
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl delete deployments $deploy
}

kdro() {
    local deploy=$1
    __get_deploy deploy
    if [[ $? == $RET_OK ]]
    then
        # replicas=$(Kubectl get deployments $deploy -o jsonpath='{.status.replicas}')
        # Kubectl scale deployments $deploy --replicas=0
        # Kubectl scale deployments $deploy --replicas=$replicas
        __k8s_echo_run Kubectl rollout restart deployment $deploy
    fi
}

kds() {
    local args=$@ count deploy
    is-array-contains $@ "--"
    if [[ $? == $RET_OK ]]
    then
        __split_args args count -- "$@"
        deploy=${args[0]}
    else
        deploy=$1
    fi
    __get_deploy deploy
    if [[ $? == $RET_OK ]]
    then
        replicas=$(Kubectl get deployments $deploy -o jsonpath='{.status.replicas}')
        if [[ x$count == x ]]
        then
            read -p "[$(c blue b)${deploy}$(c)] Scale replicas from $(c yellow+ b)${replicas}$(c) to : " count
        else
            read -p "[$(c blue b)${deploy}$(c)] Scale replicas from $(c yellow+ b)${replicas}$(c) to ${count} (Y/n) : " answer
            if [[ x$answer == xn ]] || [[ x$answer == xN ]]
            then
                return
            fi
        fi
        __k8s_echo_run Kubectl scale deployments $deploy --replicas=$count
    fi
}


#-----------------------------------------------------------------
# services
#-----------------------------------------------------------------

alias sks='KubeCtl get services'
alias sksw='KubeCtl get services -o wide'
alias sksy='KubeCtl get services -o yaml'
alias sksi='KubeCtl describe services'

alias ks='Kubectl get services'
alias ksw='Kubectl get services -o wide'
alias ksyy='Kubectl get services -o yaml'
alias ksii='Kubectl describe services'
alias ksll='klab services'
alias ksaa='kann services'

__get_service() {
    local -n __svc=$1
    if [[ $# == 0 ]] || [[ ${#__svc} -le 3 ]]
    then
        local args=($(Kubectl get services \
            --no-headers \
            --output json \
            | jq -r '.items[] |
            "\(.metadata.name)'$SED_DELIM'\(.spec.type)"'))

        [[ x${__svc} == x ]] && __select_item __svc ${args[@]} NONE || __svc=${args[$((${__svc} - 1))]}
        [[ x${__svc} == x ]] && return $RET_ERR
        [[ "${__svc}" == "invalid" ]] && return $RET_ERR
        __svc=${__svc%%${SED_DELIM}*}
    fi
    return $RET_OK
}

ksy() {
    local svc=$1
    __get_service svc
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl get services -o yaml $svc
}

ksi() {
    local svc=$1
    __get_service svc
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl describe services $svc
}

ksl() {
    local svc=$1
    __get_service svc
    [[ $? == $RET_OK ]] && klab services -- $svc
}

ksa() {
    local svc=$1
    __get_service svc
    [[ $? == $RET_OK ]] && kann services $svc
}

ksrm() {
    local svc=$1
    __get_service svc
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl delete services $svc
}

#-----------------------------------------------------------------
# ingress
#-----------------------------------------------------------------

__get_ingress() {
    local -n __ing=$1
    if [[ $# == 0 ]] || [[ ${#__ing} -le 3 ]]
    then
        local args=($(Kubectl get ingress --no-headers --output json | jq -r '.items[] | .metadata.name'))
        [[ x${__ing} == x ]] && __select_item __ing ${args[@]} NONE || __ing=${args[$((${__ing} - 1))]}
        [[ x${__ing} == x ]] && return $RET_ERR
        [[ "${__ing}" == "invalid" ]] && return $RET_ERR
    fi
    return $RET_OK
}

alias ki='Kubectl get ingress'

kirm() {
    local ing=$1
    __get_ingress ing
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl delete ingress $ing
}

kii() {
    local ing=$1
    __get_ingress ing
    [[ $? == $RET_OK ]] && __k8s_echo_run Kubectl describe ingress $ing
}


#-----------------------------------------------------------------
# utils
#-----------------------------------------------------------------

ksh() {
    local pod=$1
    local ctn=$2
    if [[ $# == 0 ]] || [[ ${#pod} -le 3 ]]
    then
        local args=($(__list_pods))
        [[ x${pod} == x ]] && __select_item pod ${args[@]} NONE || pod=${args[$((${pod} - 1))]}
        [[ x${pod} == x ]] && return $RET_ERR
        [[ "${pod}" == "invalid" ]] && return
        ctn=$(echo ${pod##*${SED_DELIM}} | cut -d\@ -f1)
        pod=${pod%%${SED_DELIM}*}
    elif [[ $# == 1 ]] || [[ ${#ctn} -le 3 ]]
    then
        args=($(Kubectl get pods $pod -o jsonpath="{.status.containerStatuses}" | jq -r '.[] | .name'))
        if (( ${#args[@]} > 1))
        then
            __select_item ctn ${args[@]} NONE
        else
            ctn=${args[0]}
        fi
    fi
    __k8s_echo_run Kubectl exec -it ${pod} -c ${ctn} -- sh
}

# 执行容器命令
kexe() {
    # kexe flask-deployment-5fd7b6c974-4pjgh -- ls -l
    local args=$@ cmd="sh"
    is-array-contains $@ "--"
    if [[ $? == 1 ]]
    then
        __split_args args cmd -- "$@"
    fi
    if (( ${#args[@]} == 0 ))
    then
        ksh
    else
        local pod=${args[0]}
        local ctn=${args[1]}
        if [[ ${#pod} -le 3 ]]
        then
            local args=($(__list_pods))
            [[ x${pod} == x ]] && __select_item pod ${args[@]} NONE || pod=${args[$((${pod} - 1))]}
            [[ x${pod} == x ]] && return $RET_ERR
            [[ "${pod}" == "invalid" ]] && return
            ctn=$(echo ${pod##*${SED_DELIM}} | cut -d\@ -f1)
            pod=${pod%%${SED_DELIM}*}
        fi

        if [[ x${ctn} == x ]]
        then
            args=($(Kubectl get pods $pod -o jsonpath="{.status.containerStatuses}" | jq -r '.[] | .name'))
            if (( ${#args[@]} > 1))
            then
                __select_item ctn ${args[@]} NONE
            else
                ctn=${args[0]}
            fi
        fi
        __k8s_echo_run Kubectl exec -it ${pod} -c ${ctn} -- $cmd
    fi
}

# log

MAX_LOG_REQUESTS=50

__klog_args() {
    local -n __c=$1 __t=$2
    local st=${__c} et utc=$(date -u +"%s")

    is-digit ${st}
    if [[ $? == 1 ]]
    then
        __c="--tail ${st}"
        return
    fi

    is-string-contains "${st}" "@"
    if [[ $? == $RET_OK ]]
    then
        st=$(echo ${__c} | cut -d\@  -f1)
        et=$(echo ${__c} | cut -d\@  -f2)
    fi

    if [[ ${st: 10:1} == 'T' ]]
    then
        __c="--tail -1 --since-time ${st}"
        if [[ ${st: -1} != 'Z' ]]
        then
            __c="${__c}+08:00"
        fi
    elif [[ ${st: -1} == 'm' ]] || [[ ${st: -1} == 'h' ]]
    then
        __c="--tail -1 --since ${st}"
    else
        __c="--tail ${st}"
    fi

    is-digit ${et}
    if [[ $? == 1 ]]
    then
        __t=${et}
        return
    fi

    if [[ x${et} != x ]]
    then
        if [[ ${et: 10:1} == 'T' ]]
        then
            if [[ ${et: -1} != 'Z' ]]
            then
                et=$(date --date="${et}+08:00" -u -Iseconds | cut -c1-19)
            fi
            __t=${et}
        else
            if [[ ${et: -1} == 'm' ]]
            then
                utc=$(expr $utc - ${et%?} \* 60)
            elif [[ ${et: -1} == 'h' ]]
            then
                utc=$(expr $utc - ${et%?} \* 3600)
            else
                __t=10
                return
            fi
            __t=$(date --date="@${utc}" -u -Iseconds | cut -c1-19)
        fi
    fi
}

# 查询日志
klogc() {
    local args=$@ cmd="10" til pod ctn
    is-array-contains $@ "--"
    if [[ $? == $RET_OK ]]
    then
        __split_args args cmd -- "$@"
        pod=${args[0]}
    else
        pod=$1
    fi

    if (( ${#args[@]} == 0 )) || (( ${#pod} <= 3 ))
    then
        local args=($(__list_pods))
        [[ x${pod} == x ]] && __select_item pod ${args[@]} NONE || pod=${args[$((${pod} - 1))]}
        [[ x${pod} == x ]] && return $RET_ERR
        [[ "${pod}" == "invalid" ]] && return
        ctn=$(echo ${pod##*${SED_DELIM}} | cut -d\@ -f1)
        pod=${pod%%${SED_DELIM}*}
    else
        pod=${args[0]}
        if (( ${#args[@]} == 1 ))
        then
            args=($(Kubectl get pods $pod -o jsonpath="{.status.containerStatuses}" | jq -r '.[] | .name'))
            if (( ${#args[@]} > 1))
            then
                __select_item ctn ${args[@]} NONE
            else
                ctn=${args[0]}
            fi
        else
            ctn=${args[1]}
        fi
    fi

    __klog_args cmd til

    if [[ x$til == x ]]
    then
        __k8s_echo_run Kubectl logs ${pod} -c ${ctn} --ignore-errors --follow ${cmd}
    else
        is-digit ${til}
        if [[ $? == 1 ]]
        then
            echo "util-count=$til"
            __k8s_echo_run Kubectl logs ${pod} -c ${ctn} --ignore-errors --timestamps ${cmd} | \
                awk -v til=$(expr ${til} + 3) '{if (NR < til) {print} else {print; exit}}'
        else
            echo "util-time=$til"
            __k8s_echo_run Kubectl logs ${pod} -c ${ctn} --ignore-errors --timestamps ${cmd} | \
                awk -v til=${til} '{if ($1 < til) {print} else {print; exit}}'
        fi
    fi
}

klogp() {
    local args=$@ cmd="10" til pod ctn
    is-array-contains $@ "--"
    if [[ $? == $RET_OK ]]
    then
        __split_args args cmd -- "$@"
        pod=${args[0]}
    else
        pod=$1
    fi

    if (( ${#args[@]} == 0 )) || (( ${#pod} <= 3 ))
    then
        __get_pod pod
    fi

    __klog_args cmd til

    if [[ x$til == x ]]
    then
        __k8s_echo_run Kubectl logs ${pod} --ignore-errors --follow ${cmd}
    else
        is-digit ${til}
        if [[ $? == 1 ]]
        then
            __k8s_echo_run Kubectl logs ${pod} --all-containers=true --ignore-errors --timestamps ${cmd} | \
                awk -v til=$(expr ${til} + 3) '{if (NR < til) {print} else {print; exit}}'
        else
            echo "util-time=$til"
            __k8s_echo_run Kubectl logs ${pod} --all-containers=true --ignore-errors --timestamps ${cmd} | \
                awk -v til=${til} '{if ($1 < til) {print} else {print; exit}}'
        fi
    fi
}

klogn() {
    local args=$@ cmd="50" til
    is-array-contains $@ "--"
    if [[ $? == $RET_OK ]]
    then
        __split_args args cmd -- "$@"
    fi
    ns=$(__read_ns | cut -c 13-)
    args="--prefix=false -l log=${ns} --max-log-requests=${MAX_LOG_REQUESTS} --ignore-errors"

    __klog_args cmd til

    if [[ x$til == x ]]
    then
        __k8s_echo_run Kubectl logs ${args} --follow ${cmd}
    else
        is-digit ${til}
        if [[ $? == 1 ]]
        then
            echo "util-count=$til"
            __k8s_echo_run Kubectl logs ${args} --timestamps ${cmd} | \
                awk -v til=$(expr ${til} + 3) '{if (NR < til) {print} else {print; exit}}'
        else
            echo "util-time=$til"
            __k8s_echo_run Kubectl logs ${args} --timestamps ${cmd} | \
                awk -v til=${til} '{if ($1 < til) {print} else {print; exit}}'
        fi
    fi
}

alias pklog='PREFIX=true klog'
alias wklog='WAITS=10 klog'
alias klogd='klog'

klog() {
    # klog flask-deployment -- 10
    prefix=${PREFIX:-'false'}
    llabel=${LLABEL:-'app'}
    waits=${WAITS:-0}
    local args=$@ cmd="10" til deploy
    is-array-contains $@ "--"
    if [[ $? == $RET_OK ]]
    then
        __split_args args cmd -- "$@"
        deploy=${args[0]}
    else
        deploy=$1
    fi

    if (( ${#args[@]} == 0 )) || (( ${#deploy} <= 3 ))
    then
        __get_deploy deploy
        [[ $? != $RET_OK ]] && return
    fi

    if (( ${waits} > 0 ))
    then
        echo "sleep 3s"
        sleep 3
        for i in `seq ${waits}`
        do
            local ready_cnt=$(Kubectl get deployments ${deploy} -o jsonpath='{.status.readyReplicas}')
            local replicas=$(Kubectl get deployments ${deploy} -o jsonpath='{.status.replicas}')
            echo "$(c yellow+ b)Waiting replicas ($i)..., (${ready_cnt}/${replicas}). $(c)"
            sleep 1
            if [[ x${ready_cnt} == x${replicas} ]]
            then
                break
            fi
        done
    else
        local replicas=$(Kubectl get deployments ${deploy} -o jsonpath='{.status.replicas}')
    fi

    __klog_args cmd til

    label=$(Kubectl get deployment ${deploy} -o json | jq -r ".spec.template.metadata.labels.${llabel}")
    if [[ $label == null ]]
    then
        if [[ x$til == x ]]
        then
            __k8s_echo_run Kubectl logs deployments/${deploy} --prefix=${prefix} --all-containers=true --ignore-errors --follow ${cmd}
        else
            is-digit ${til}
            if [[ $? == 1 ]]
            then
                __k8s_echo_run Kubectl logs deployments/${deploy} --prefix=${prefix} \
                    --all-containers=true --ignore-errors --timestamps ${cmd} | \
                    awk -v til=$(expr ${til} + 3) '{if (NR < til) {print} else {print; exit}}'
            else
                if [[ $prefix == true ]]
                then
                    __k8s_echo_run Kubectl logs deployments/${deploy} --prefix=${prefix} \
                        --all-containers=true --ignore-errors --timestamps ${cmd} | \
                        awk -v til=${til} '{if ($2 < til) {print} else {print; exit}}'
                else
                    __k8s_echo_run Kubectl logs deployments/${deploy} --prefix=${prefix} \
                        --all-containers=true --ignore-errors --timestamps ${cmd} | \
                        awk -v til=${til} '{if ($1 < til) {print} else {print; exit}}'
                fi
            fi
        fi
    else
        local labels="-l ${llabel}=${label}"
        local containers=($(Kubectl get deployments $deploy -o jsonpath="{.spec.template.spec.containers[*].name}"))
        local args
        if [[ ${#containers[@]} == 1 ]]
        then
            args="--prefix=${prefix} ${labels} --max-log-requests=${MAX_LOG_REQUESTS} --ignore-errors"
        else
            __select_item ctn "ALL" ${containers[@]} container
            [[ x${ctn} == x ]] && return
            [[ "${ctn}" == "invalid" ]] && return
            if [[ ${ctn} == ALL ]]
            then
                # (( max_reqs = replicas * ${#containers[@]} ))
                args="--prefix=${prefix} ${labels} --all-containers=true --max-log-requests=${MAX_LOG_REQUESTS} --ignore-errors"
            else
                args="--prefix=${prefix} ${labels} -c ${ctn} --max-log-requests=${MAX_LOG_REQUESTS} --ignore-errors"
            fi
        fi
        if [[ x$til == x ]]
        then
            __k8s_echo_run Kubectl logs ${args} --follow ${cmd}
            if [[ $? == 1 ]]
            then
                sleep 3
                __k8s_echo_run Kubectl logs ${args} --follow ${cmd}
            fi
        else
            is-digit ${til}
            if [[ $? == 1 ]]
            then
                __k8s_echo_run Kubectl logs ${args} --timestamps ${cmd} | \
                    awk -v til=$(expr ${til} + 3) '{if (NR < til) {print} else {print; exit}}'
            else
                if [[ $prefix == true ]]
                then
                    __k8s_echo_run Kubectl logs ${args} --timestamps ${cmd} | \
                        awk -v til=${til} '{if ($2 < til) {print} else {print; exit}}'
                else
                    __k8s_echo_run Kubectl logs ${args} --timestamps ${cmd} | \
                        awk -v til=${til} '{if ($1 < til) {print} else {print; exit}}'
                fi
            fi
        fi
    fi
}

#-----------------------------------------------------------------
# job
#-----------------------------------------------------------------
alias kj='Kubectl get jobs'
alias kjw='Kubectl get jobs -o wide'
alias kjy='Kubectl get jobs -o yaml'
alias kji='Kubectl describe jobs'
alias kjrm='Kubectl delete jobs'

#-----------------------------------------------------------------
# cronjob
#-----------------------------------------------------------------
alias wkcj='Kubectl get cronjobs --watch'
alias kcj='Kubectl get cronjobs'
alias kcjw='Kubectl get cronjobs -o wide'
alias kcjy='Kubectl get cronjobs -o yaml'
alias kcji='Kubectl describe cronjobs'
alias kcjrm='Kubectl delete cronjobs'


#-----------------------------------------------------------------
# deamonset
#-----------------------------------------------------------------

alias kdss='Kubectl get daemonsets'
alias kdss='Kubectl get daemonsets'
alias kdsw='Kubectl get daemonsets -o wide'
alias kdsy='Kubectl get daemonsets -o yaml'
alias kdsi='Kubectl describe daemonsets'
alias kdsrm='Kubectl delete daemonsets'


#-----------------------------------------------------------------
# configmap & secret
#-----------------------------------------------------------------

alias km='Kubectl get configmap'
alias kmw='Kubectl get configmap -o wide'
alias kmy='Kubectl get configmap -o yaml'
alias kmi='Kubectl describe configmap'

alias kM='Kubectl get secret'
alias kMw='Kubectl get secret -o wide'
alias kMy='Kubectl get secret -o yaml'
alias kMi='Kubectl describe secret'

kmm() {
    if [[ $# == 2 ]]
    then
        local cm=$1
        local key=${2}
        key=$(sed 's/\./\\\./' <<<"$key")
        Kubectl get cm "$cm" -o jsonpath="{.data.$key}"
        return
    elif [[ $# == 1 ]]
    then
        echo "$(c yellow+ b)$1$(c)"
        Kubectl get cm $1 -o jsonpath='{.data}' | jq -r 'keys | join("\n")' | sed 's/^/  /'
        return
    fi
    Kubectl get cm -o custom-columns=:.metadata.name --no-headers \
        | while read line
        do
            local name=$(awk '{print $1}' <<< $line)
            echo "$(c yellow+ b)$name$(c)"
            Kubectl get cm $name -o jsonpath='{.data}' | jq -r 'keys | join("\n")' | sed 's/^/  /'
        done
}


kMM() {
    if [[ $# == 2 ]]
    then
        local secret=$1
        local key=${2}
        key=$(sed 's/\./\\\./' <<<"$key")
        local value=$(Kubectl get secret "$secret" -o jsonpath="{.data.$key}")
        if [[ "$value" != "<nil>" ]]
        then
            echo "$value" | base64 -d
        fi
        return
    elif [[ $# == 1 ]]
    then
        echo "$(c yellow+ b)$1$(c)"
        Kubectl get secret $1 -o jsonpath='{.data}' | jq -r 'keys | join("\n")' | sed 's/^/  /'
        return
    fi
    Kubectl get secret -o custom-columns=:.metadata.name --no-headers \
        | while read line
        do
            local name=$(awk '{print $1}' <<< $line)
            echo "$(c yellow+ b)$name$(c)"
            Kubectl get secret $name -o jsonpath='{.data}' | jq -r 'keys | join("\n")' | sed 's/^/  /'
        done
}


#-----------------------------------------------------------------
# events
#-----------------------------------------------------------------

kee() {
  name=$1 && shift
  kubectl get events \
    --field-selector=involvedObject.name="$name" \
    --sort-by=lastTimestamp \
    -o custom-columns='KIND:involvedObject.kind,TIME:lastTimestamp,EMITTED BY:source.component,REASON:reason,MESSAGE:message' \
    "$@"
}

#-----------------------------------------------------------------
# others
#-----------------------------------------------------------------
# kubectl explain --api-version="batch/v1" cronjobs.spec
