#!/bin/bash

KAFKA_CONTAINER_NAME='kafka'
KAFKA_BOOTSTRAP_SERV='0.0.0.0:9092'

KNAME=$KAFKA_CONTAINER_NAME
KSERV=$KAFKA_BOOTSTRAP_SERV

kth() {
    __line__
    echo " ktl: list topics"
    echo " ktc: create topic"
    echo "ktrm: remove topic"
    echo " kti: describe topic"
    __line__
    echo " kgl: list groups"
    echo "kgrm: remove group"
    echo " kgi: describe group"
    __line__
    echo " ktr: read message"
    __line__
}

#-----------------------------------------------------------------
# Topic
#-----------------------------------------------------------------

__kafka_list_topics() {
    cmd="kafka-topics.sh --bootstrap-server $KSERV --list"
    docker exec $KNAME sh -c "$cmd" | grep -v "__"
}

__get_topics() {
    local -n __topic=$1
    if [[ $# == 0 ]] || [[ ${#__topic} -le 3 ]]
    then
        local args=($(__kafka_list_topics))
        [[ x${__topic} == x ]] && __select_item __topic ${args[@]} topic || __topic=${args[$((${__topic} - 1))]}
        [[ "${__topic}" == "invalid" ]] && return $RET_ERR
        __topic=${__topic%%${SED_DELIM}*}
    fi
    return $RET_OK
}

ktl() {
    topics=($(__kafka_list_topics))
    __line__
    i=0
    for topic in ${topics[@]}
    do
        (( i = i + 1 ))
        printf "   %3d. %s\n" $i ${topic}
    done
    __line__
}

ktc() {
    newcmd="kafka-topics.sh --bootstrap-server $KSERV --create"
    local topic=$1 partitions=$2
    if [[ x$topic == x ]]
    then
        read -p "Input topic: " topic
    fi
    if [[ x$partitions == x ]]
    then
        read -p "Input partitions: " partitions
    fi
    __echo_run docker exec $KNAME sh -c \"$newcmd --topic $topic --if-not-exists --partitions ${partitions} --replication-factor 1\"
}

ktrm() {
    rmcmd="kafka-topics.sh --bootstrap-server $KSERV --delete"
    local topic=$1
    __get_topics topic
    [[ $? == $RET_OK ]] && __echo_run docker exec $KNAME sh -c \"$rmcmd --topic $topic\"
}

kti() {
    infocmd="kafka-topics.sh --bootstrap-server $KSERV --describe"
    local topic=$1
    __get_topics topic
    [[ $? == $RET_OK ]] && __echo_run docker exec $KNAME sh -c \"$infocmd --topic $topic\"
}

#-----------------------------------------------------------------
# Group
#-----------------------------------------------------------------

__kafka_list_groups() {
    cmd="kafka-consumer-groups.sh --bootstrap-server $KSERV --list"
    docker exec $KNAME sh -c "$cmd"
}

__get_groups() {
    local -n __group=$1
    if [[ $# == 0 ]] || [[ ${#__group} -le 3 ]]
    then
        local args=($(__kafka_list_groups))
        [[ x${__group} == x ]] && __select_item __group ${args[@]} group || __group=${args[$((${__group} - 1))]}
        [[ "${__group}" == "invalid" ]] && return $RET_ERR
        __group=${__group%%${SED_DELIM}*}
    fi
    return $RET_OK
}

kgl() {
    groups=($(__kafka_list_groups))
    __line__
    i=0
    for group in ${groups[@]}
    do
        (( i = i + 1 ))
        printf "   %3d. %s\n" $i ${group}
    done
    __line__
}

kgrm() {
    rmcmd="kafka-consumer-groups.sh --bootstrap-server $KSERV --delete"
    if [[ x$1 == xhelp ]]
    then
        echo "kgrm [group_or_id] [-- topic_or_id]"
        return
    fi
    local group=$1 topic
    __split_args group topic -- "$@"
    __get_groups group
    if [[ x${topic} != x ]]
    then
        __get_topics ${topic}
        rmcmd="${rmcmd} --topic ${topic}"
    fi
    [[ $? == $RET_OK ]] && __echo_run docker exec $KNAME sh -c \"$rmcmd --group $group\"
}

kgi() {
    infocmd="kafka-consumer-groups.sh --bootstrap-server $KSERV --describe"
    if [[ x$1 == xhelp ]]
    then
        echo "kgi [group_or_id] [-- topic_or_id]"
        return
    fi
    local group=$1 topic
    __split_args group topic -- "$@"
    if [[ x${topic} != x ]]
    then
        __get_topics ${topic}
        infocmd="${infocmd} --topic ${topic}"
    fi
    __get_groups group
    [[ $? == $RET_OK ]] && __echo_run docker exec $KNAME sh -c \"$infocmd --group $group\" | \
        awk '{if (NR>5) {
            {printf "%-16s%-16s%-11d%-16d%-16d%-8d%-20s%-12s\n",
                substr($1,1,15),substr($2,1,15),$3,$4,$5,$6,substr($8,2,18),substr($9,2)};
                s1+=$4;s2+=$5;s3+=$6;
            } else if (NR==5)
                {printf "%-16s%-16s%-11s%-16s%-16s%-8s%-20s%-12s\n","GROUP","TOPIC","PARTITION","CURRENT-OFFSET","LOG-END-OFFSET","LAG","HOST","CLIENT-ID"}
            }
    END {printf "\n%-38sSUM: %-16d%-16d%-8d\n", " ",s1,s2,s3}'
}

#-----------------------------------------------------------------
# Other
#-----------------------------------------------------------------

kts() {
    sumcmd="kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list $KSERV --time -2"
    local topic=$1
    __get_topics topic
    [[ $? == $RET_OK ]] && __echo_run "docker exec $KNAME sh -c \"$sumcmd --topic $topic\" | awk -F  ':' '{sum += \$3} END {print sum}'"
}

ktr() {
    rcmd="kafka-console-consumer.sh --bootstrap-server $KSERV --skip-message-on-error"
    if [[ x$1 == xhelp ]]
    then
        echo "kgr [topic_or_id] [-- offset[id|earliest|latest]]"
        return
    fi
    local topic=$1
    __get_topics topic
    [[ $? == $RET_OK ]] && __echo_run docker exec $KNAME sh -c \"$rcmd --topic $topic\"
}
